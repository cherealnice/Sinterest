c
current_user['password'] = 'as'
c
user_edit_params['email']
edit_user_params['email']
user_edit_params.keys.each do |param| p (param) end
user_edit_params.keys.each do |param| p (para) end
user_edit_params.each do |param| p (param[0]) end
user_edit_params.each do |param| p (param) end
user_edit_params.each do |param| console.log(param) end
user_edit_params.each do |param|
user_edit_params
params[:user]
params
c
n
@user.image
n
current_user
params
c
current_user
@user
@user.image
n
params
c
params
c
User.last
c
@user.image
@user.image = params[:user][:image]
@user = current_user
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
@sins.length
n
c
      .select{ |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }}c
      .offset(offset)
      .limit(25)
      .includes(:sin_boards, :boards, :images, :user, :comments, :users_liked)
Sin
SinBoard.where({board_id: board_ids}).length
SinBoard.where({id: board_ids}).length
SinBoard.lncludes({id: board_ids}).length
SinBoard.where({id: board_ids}).length
SinBoard.where({id: board_ids})
n
c
n
boards
n
c
nc
n
c
n
display @sins
n
display board_ids
board_ids
n
params
c
<<<<<<< HEAD
@user.password
@user
=======
page
c
page
>>>>>>> AddInfiniteScroll
c
cc
c
cc
c
cc
c
cc
c
cc
c
sin.likes
sin
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
sin.user.likes
c
sin.comments
sin.image
sin
c
@sins.first.user
@sins.first.comments
@sins.first
c
@sins
c
Sin.includes(:sin_boards, :images, :user, :comments).select{ |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }}c
Sin.includes(:sin_boards, :images, :user, :comments).select{ |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }}
sin_boards = SinBoard.includes(:sin, :board).where(board_id: board_ids)
Sin.includes(:sin_boards, :images, :user, :comments).select{ |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }}
sin_boards = SinBoard.includes(:sin, :board).where(board_id: board_ids)
Sin.includes(:sin_boards, :images, :user, :comments).select{ |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }}
Sin.includes(:sin_boards, :images, :user, :comments).select( |s| sin_boards.any?{ |sb| s.sin_boards.include?(sb) }
Sin.includes(:sin_boards, :images, :user, :comments).select( |s| sin_boards.any?{ |sb| s.sin_boards.include = sb }
sin_boards = SinBoard.includes(:sins, :boards).where(board_id: board_ids)
Sin.where(sin_boards: sin_boards.sin_id)
Sin.where(sin_boards.sin_id: sin_boards)
sin_boards
Sin.where(sin_boards: sin_boards)
Sin.where(sin_board: sin_boards)
sin_boards = SinBoard.includes(:sins, :boards).where(board_id: board_ids)
Sin.includes(:sin_boards, :images, :user, :comments).where(sin_board: SinBoard.includes(:sins, :boards).where(board_id: board_ids))
SinBoard.includes(:sins, :boards).where(board_id: board_ids)
Sin.includes(:sin_boards, :images, :user, :comments)
Sin.includes(:sin_boards, :images, :user, :comments).select{|s| s.boards.any? {|b| board_ids.include?(b.id)}}
Sin.first.boards.
Sin.includes(:sin_boards, :images, :user, :comments).select{|s| s.boards.any? {|b| b.sins.include?(s)}}
Sin.includes(:sin_boards, :images, :user, :comments).select{|s| s.boards.sins.include?(s)}
Sin.includes(:sin_boards, :image, :user, :comments).select{|s| s.boards.sins.include?(s)}
boards.first.author
boards
c
cc
c
cc
c
cc
c
cc
c
@sins
c
@sins.first.sins
@sins.first
@sins
c
params
c
params
c
params
c
params
c
params
c
x
params
c
User.find(params[:user][:id]).boards
User.find(params[:user][:id])
params
c
!!follow
follow
c
current_user.follows.where({followable_id: id,followable_type: type
followTarget
n
@follow.user
@follow
n
type
n
id
n
c
follow_params
params
c
follows.includes(followable: target).first
follows.includes(followable: target).empty?
c
follows.includes(followable: target).empty?
c
follows.includes(followable: target).empty?
c
follows.includes(followable: target).empty?
follows.includes(followable: target)
target
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
current_user.follows?(board)
c
board.sins[(0..3)].map { |sin| asset_path(sin.image.url(:thumb)) }
board.sins
board.images
c
x
c
board.sins[(0..3)].map { |sin| asset_path(sin.image.url(:thumb)) }
c
board.sins
board.sins[(0..3)].map { |sin| asset_path(sin.image.url(:thumb)) }
board
c
User.find_by_credentials( params[:email], params[:password])
params
param
c
cx
x
params
User.find_by_credentials( params[:email], params[:password])
User.find_by_credentials( params[:email], params[:password]])
